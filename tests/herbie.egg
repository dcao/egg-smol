;; Implements part of the simplification layer of herbie in egg-smolðŸ«¡

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Datatypes

;; Operators from FPCore
(datatype Math
  ; Ground terms
  (Num Rational)
  (Var String)

  ; Custom ops
  (Const String)
  (Unary String Math)
  ; unneeded for now
  ; (Binary String Math Math)

  ; Constant-folding ops
  (Add Math Math)
  (Sub Math Math)
  (Mul Math Math)
  (Div Math Math)
  (Pow Math Math)
  (Neg Math)
  (Sqrt Math)
  (Cbrt Math) ; cube root
  (Fabs Math)
  (Ceil Math)
  (Floor Math)
  (Round Math)
  (Log Math))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Analyses
;; --------
;; This example has three analyses:
;; an interval analysis consisting of a hi and lo component
;; and a non-zero analysis.
;; The non-zero analysis is built off the interval analysis (in order to prove
;; that rewrites are sound, even if some parts of an expr can't be const-evaled)

; No upper bound = positive infinity
(function hi (Math) Rational :merge (min old new))
; No lower bound = negative infinity
(function lo (Math) Rational :merge (max old new))
(relation non-zero (Math))

;; First, constant folding!
;; We don't need an explicit constant folding analysis, we can just union
;; with nums when we can

; Cases
(rewrite (Add (Num a) (Num b)) (Num (+ a b)))
(rewrite (Sub (Num a) (Num b)) (Num (- a b)))
(rewrite (Mul (Num a) (Num b)) (Num (* a b)))
(rewrite (Div (Num a) denom) (Num (/ a b)) :when ((= denom (Num b)) (non-zero denom)))
; TODO: pow
(rewrite (Neg (Num a)) (Num (neg a)))
; TODO: sqrt
; TODO: cbrt
(rewrite (Fabs (Num a)) (Num (abs a)))
(rewrite (Ceil (Num a)) (Num (ceil a)))
(rewrite (Floor (Num a)) (Num (floor a)))
(rewrite (Round (Num a)) (Num (round a)))
; TODO: log

;; To check if something is zero, we check that zero is not contained in the
;; interval. There are two possible (overlapping!) cases:
;; - There exists a lo interval, in which case it must be larger than 0
;; - There exists a hi interval, in which case it must be smaller than 0
;; This allows for numbers with one-sided intervals to also be non-zero
;; (although right now in practice the way we've defined interval computation
;; precludes this), and removes the need for an "interval contains zero" primitive
;; (though it requires comparison prims).
;; This assumes that intervals are well-formed: lo <= hi at all times.
(rule ((= l (lo e))
       (> l (rational 0 1)))
      ((non-zero e)))
(rule ((= h (hi e))
       (< h (rational 0 1)))
      ((non-zero e)))

(rule ((= e (Num ve)))
      ((set (lo e) ve)
       (set (hi e) ve)))

;; The interval analyses are similar to the constant-folding analysis,
;; except we have to take the lower/upper bound of the results we get
; TODO: Deal with unbounded intervals?
;       This would require some notion of "relation does not contain";
;       does this require negation?
(rule ((= e (Add a b))
       (= la (lo a))
       (= lb (lo b)))
      ((set (lo e) (+ la lb))))
(rule ((= e (Add a b))
       (= ha (hi a))
       (= hb (hi b)))
      ((set (hi e) (+ ha hb))))
      
(rule ((= e (Sub a b))
       (= la (lo a))
       (= ha (hi a))
       (= lb (lo b))
       (= hb (hi b)))
      ((set (lo e) 
          (min (min (- la lb) (- la hb))
               (min (- ha lb) (- ha hb))))
       (set (hi e) 
          (max (max (- la lb) (- la hb))
               (max (- ha lb) (- ha hb))))))

(rule ((= e (Mul a b))
       (= la (lo a))
       (= ha (hi a))
       (= lb (lo b))
       (= hb (hi b)))
      ((set (lo e) 
          (min (min (* la lb) (* la hb))
               (min (* ha lb) (* ha hb))))
       (set (hi e) 
          (max (max (* la lb) (* la hb))
               (max (* ha lb) (* ha hb))))))

(rule ((= e (Div a b))
       (= la (lo a))
       (= ha (hi a))
       (= lb (lo b))
       (= hb (hi b))
       (!= lb (rational 0 1))
       (!= hb (rational 0 1)))
      ((set (lo e) 
          (min (min (/ la lb) (/ la hb))
               (min (/ ha lb) (/ ha hb))))
       (set (hi e) 
          (max (max (/ la lb) (/ la hb))
               (max (/ ha lb) (/ ha hb))))))

; TODO: Pow

(rule ((= e (Neg a))
       (= ha (hi a)))
      ((set (lo e) (neg ha))))
(rule ((= e (Neg a))
       (= la (lo a)))
      ((set (hi e) (neg la))))

; TODO: Sqrt
; TODO: Cbrt

(rule ((= e (Fabs a))
       (= la (lo a))
       (= ha (hi a)))
      ((set (lo e) (min (abs la) (abs ha)))
       (set (hi e) (max (abs la) (abs ha)))))

(rule ((= e (Ceil a))
       (= la (lo a)))
      ((set (lo e) (ceil la))))
(rule ((= e (Ceil a))
       (= ha (hi a)))
      ((set (hi e) (ceil ha))))

(rule ((= e (Floor a))
       (= la (lo a)))
      ((set (lo e) (floor la))))
(rule ((= e (Floor a))
       (= ha (hi a)))
      ((set (hi e) (floor ha))))

(rule ((= e (Round a))
       (= la (lo a)))
      ((set (lo e) (round la))))
(rule ((= e (Round a))
       (= ha (hi a)))
      ((set (hi e) (round ha))))

; TODO: Log

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Rewrites
;; --------
;; These rewrites were compiled from src/syntax/rules.rkt in the herbie repo,
;; using all rewrites in the `simplify` rewrite group.

;; Commutativity
(rewrite (Add a b) (Add b a))
(rewrite (Mul a b) (Mul b a))

;; Associativity
(rewrite (Add a (Add b c)) (Add (Add a b) c))
(rewrite (Add (Add a b) c) (Add a (Add b c)))
(rewrite (Add a (Sub b c)) (Sub (Add a b) c))
(rewrite (Add (Sub a b) c) (Sub a (Sub b c)))
(rewrite (Sub a (Add b c)) (Sub (Sub a b) c))
(rewrite (Sub (Add a b) c) (Add a (Sub b c)))
(rewrite (Sub (Sub a b) c) (Sub a (Add b c)))
(rewrite (Sub a (Sub b c)) (Add (Sub a b) c))
(rewrite (Mul a (Mul b c)) (Mul (Mul a b) c))
(rewrite (Mul (Mul a b) c) (Mul a (Mul b c)))
(rewrite (Mul a (Div b c)) (Div (Mul a b) c))
(rewrite (Mul (Div a b) c) (Div (Mul a c) b))
(rewrite (Div a (Mul b c)) (Div (Div a b) c))
(rewrite (Div (Mul b c) a) (Div b (Div a c)) :when ((non-zero c)))
(rewrite (Div a (Div b c)) (Mul (Div a b) c) :when ((non-zero c)))
(rewrite (Div (Div b c) a) (Div b (Mul a c)) :when ((non-zero a)))

;; Counting
(rewrite (Add x x) (Mul (Num (rational 2 1)) x))

;; Distributivity
(rewrite (Mul a (Add b c))         (Add (Mul a b) (Mul a c)))
(rewrite (Mul a (Add b c))         (Add (Mul b a) (Mul c a)))
(rewrite (Add (Mul a b) (Mul a c)) (Mul a (Add b c)))
(rewrite (Sub (Mul a b) (Mul a c)) (Mul a (Sub b c)))
(rewrite (Add (Mul b a) (Mul c a)) (Mul a (Add b c)))
(rewrite (Sub (Mul b a) (Mul c a)) (Mul a (Sub b c)))
(rewrite (Add (Mul b a) a)         (Mul (Add b (Num (rational 1 1))) a))
(rewrite (Add a (Mul c a))         (Mul (Add c (Num (rational 1 1))) a))

(rewrite (Neg (Mul a b))       (Mul (Neg a) b))
(rewrite (Neg (Mul a b))       (Mul a (Neg b)))
(rewrite (Mul (Neg a) b)       (Neg (Mul a b)))
(rewrite (Mul a (Neg b))       (Neg (Mul a b)))
(rewrite (Neg (Add a b))       (Add (Neg a) (Neg b)))
(rewrite (Add (Neg a) (Neg b)) (Neg (Add a b)))
(rewrite (Div (Neg a) b)       (Neg (Div a b)))
(rewrite (Neg (Div a b))       (Div (Neg a) b))

(rewrite (Sub a (Mul (Neg b) c)) (Add a (Mul b c)))
(rewrite (Sub a (Mul b c))       (Add a (Mul (Neg b) c)))

;; Difference of squares
(rewrite (Mul (Mul a b) (Mul a b))                           (Mul (Mul a a) (Mul b b)))
(rewrite (Mul (Mul a a) (Mul b b))                           (Mul (Mul a b) (Mul a b)))
(rewrite (Sub (Mul a a) (Mul b b))                           (Mul (Add a b) (Sub a b)))
(rewrite (Sub (Mul a a) (Num (rational 1 1)))                (Mul (Add a (Num (rational 1 1))) (Sub a (Num (rational 1 1)))))
(rewrite (Add (Mul a a) (Neg (Num (rational 1 1))))          (Mul (Add a (Num (rational 1 1))) (Sub a (Num (rational 1 1)))))
(rewrite (Pow a b) (Mul (Pow a (Div b (Num (rational 2 1)))) (Pow a (Div b (Num (rational 2 1))))))
(rewrite (Mul (Pow a b) (Pow a b))                           (Pow a (Mul (Num (rational 2 1)) b)))

;; Identity
;; This isn't subsumed by const folding since this can return results
;; even if we can't evaluate a precise value for x
(rewrite (Div (Num (rational 1 1)) (Div (Num (rational 1 1)) x))
         x
         :when ((non-zero x)))
(rewrite (Mul x (Div (Num (rational 1 1)) x))
         (Num (rational 1 1))
         :when ((non-zero x)))
(rewrite (Mul (Div (Num (rational 1 1)) x) x)
         (Num (rational 1 1))
         :when ((non-zero x)))

(rewrite (Sub x x) (Num (rational 0 1)))
(rewrite (Div x x) (Num (rational 1 1))
         :when ((non-zero x)))
(rewrite (Div (Num (rational 0 1)) x) (Num (rational 0 1))
         :when ((non-zero x)))
(rewrite (Mul (Num (rational 0 1)) x) (Num (rational 0 1)))
(rewrite (Mul x (Num (rational 0 1))) (Num (rational 0 1)))

(rewrite (Add (Num (rational 0 1)) x) x)
(rewrite (Add x (Num (rational 0 1))) x)
(rewrite (Sub (Num (rational 0 1)) x) (Neg x))
(rewrite (Sub x (Num (rational 0 1))) x)
(rewrite (Neg (Neg x)) x)
(rewrite (Mul (Num (rational 1 1)) x) x)
(rewrite (Mul x (Num (rational 1 1))) x)
(rewrite (Div x (Num (rational 1 1))) x)
(rewrite (Mul (Num (rational -1 1)) x) (Neg x))
 
(rewrite (Sub a b) (Add a (Neg b)))
(rewrite (Add a (Neg b)) (Sub a b))
(rewrite (Neg x) (Sub (Num (rational 0 1)) x))
(rewrite (Neg x) (Mul (Num (rational -1 1)) x))

(rewrite (Div x y) (Mul x (Div (Num (rational 1 1)) y)))
(rewrite (Mul x (Div (Num (rational 1 1)) y)) (Div x y))
(rewrite (Div x y) (Div (Num (rational 1 1)) (Div y x))
  :when ((non-zero x)
         (non-zero y)))

; TODO: this rule can't be expressed because egg-smol can't infer a type for
;       the var `x`
;       this would be fixed if we could do sort annotations on x (i.e. "(Math x)")
; (rewrite x (Mul (Num (rational 1 1)) x))

;; Fractions
(rewrite (Div (Sub a b) c)         (Sub (Div a c) (Div b c)))
(rewrite (Div (Mul a b) (Mul c d)) (Mul (Div a c) (Div b d)))

;; Square root
(rewrite (Mul (Sqrt x) (Sqrt x)) x)
(rewrite (Sqrt (Mul x x)) (Fabs x))

(rewrite (Mul (Neg x) (Neg x)) (Mul x x))
(rewrite (Mul (Fabs x) (Fabs x)) (Mul x x))

;; Absolute values
(rewrite (Fabs (Fabs x)) (Fabs x))
(rewrite (Fabs (Sub a b)) (Fabs (Sub b a)))
(rewrite (Fabs (Neg x)) (Fabs x))
(rewrite (Fabs (Mul x x)) (Mul x x))
(rewrite (Fabs (Mul a b)) (Mul (Fabs a) (Fabs b)))
(rewrite (Fabs (Div a b)) (Div (Fabs a) (Fabs b)))

;; Cube root
(rewrite (Pow (Cbrt x) (Num (rational 3 1)))    x)
(rewrite (Cbrt (Pow x (Num (rational 3 1))))    x)
(rewrite (Mul (Mul (Cbrt x) (Cbrt x)) (Cbrt x)) x)
(rewrite (Mul (Cbrt x) (Mul (Cbrt x) (Cbrt x))) x)
(rewrite (Pow (Neg x) (Num (rational 3 1)))     (Neg (Pow x (Num (rational 3 1)))))

(rewrite (Pow (Mul x y) (Num (rational 3 1)))
         (Mul (Pow x (Num (rational 3 1))) (Pow y (Num (rational 3 1)))))
(rewrite (Pow (Div x y) (Num (rational 3 1)))
         (Div (Pow x (Num (rational 3 1))) (Pow y (Num (rational 3 1)))))
 
(rewrite (Pow x (Num (rational 3 1))) (Mul x (Mul x x)))
; FIXME: this rewrite is slow and has the potential to blow up the egraph
;        before the powers rewrites were added, when this rewrite is enabled
;        and â‰¥ 3 iters are run on test 2 (* 5 2), perf goes into the gutter
;        this is bc this rule and the second-to-last difference of squares rule
;        have some cyclic behavior goin on
;        the last identity rule compounds this behavior
;        this is improved somewhat by adding the powers rewrites, but it's still
;        really bad compared to if this rewrite isn't enabled (0.003s -> 0.129s)
;        it's bad enough to where test 1 can't be run with â‰¥ 6 iters
(rewrite (Mul x (Mul x x)) (Pow x (Num (rational 3 1))))

;; TODO: Exponentials

;; Powers
(rewrite (Pow a (Num (rational -1 1))) (Div (Num (rational 1 1)) a))
(rewrite (Pow a (Num (rational 1 1))) a)

; 0^0 is undefined
(rewrite (Pow a (Num (rational 0 1))) (Num (rational 1 1)) :when ((non-zero a)))
(rewrite (Pow (Num (rational 1 1)) a) (Num (rational 1 1)))

; TODO: exp
; (rewrite (Exp (Mul (Log a) b)) (Pow a b))
(rewrite (Mul (Pow a b) a) (Pow a (Add b (Num (rational 1 1)))))
(rewrite (Pow a (Num (rational 1 2))) (Sqrt a))
(rewrite (Pow a (Num (rational 2 1))) (Mul a a))
(rewrite (Pow a (Num (rational 1 3))) (Cbrt a))
(rewrite (Pow a (Num (rational 3 1))) (Mul (Mul a a) a))

; 0^0 is undefined
(rewrite (Pow (Num (rational 0 1)) a) (Num (rational 0 1)) :when ((non-zero a)))

;; Logarithms
(rewrite (Log (Mul a b)) (Add (Log a) (Log b)))
(rewrite (Log (Div a b)) (Sub (Log a) (Log b)))
(rewrite (Log (Div (Num (rational 1 1)) a)) (Neg (Log a)))
(rewrite (Log (Pow a b)) (Mul b (Log a)))
; TODO: (rewrite (Log (E)) (Num (rational 1 1)))

;; TODO: Trig
;; TODO: Misc.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Testing
;; -------
;; In actuality, herbie would be responsible for plugging exprs in here.
;; For testing purposes we just come up with some example test cases

;; Test 1: zero-check
(define one (Num (rational 1 1)))

(define x (Var "x"))
(set (lo x) (rational 0 1))
(set (hi x) (rational 100 1))

(define e (Div one (Add x one)))

(run 5)
(check (non-zero e))

; Note: we want to test running more iters;
; we only need 5 iters to check that e is non-zero,
; however, to bug test if e's non-zero-ness is stable, we run
; for a few more iters and check again
; However, with our rewrite set this is prohibitively slow.
; See FIXME above
; (run 1)
; (check (non-zero e))

;; Test 2: const eval
(define ten-e (Mul (Num (rational 5 1)) (Num (rational 2 1))))
(run 5)
(extract ten-e)
